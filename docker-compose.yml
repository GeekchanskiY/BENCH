version: '3.8'
services:
  db-local:
    image: postgres:14.5
    container_name: db-fastapi
    hostname: db-fastapi
    restart: always
    ports:
      - "8001:5432"
    env_file:
      - ./.env_db_fastapi
    volumes:
      - pgdata_fastapi:/var/lib/postgresql/data
    networks:
      - backend_fastapi
  
  db-local2:
    image: postgres:14.5
    container_name: db-rails
    hostname: db-rails
    restart: always
    ports:
      - "8002:5432"
    env_file:
      - ./.env_db_rails
    volumes:
      - pgdata_rails:/var/lib/postgresql/data
    networks:
      - backend_rails

  # FastAPI application
  coordinator_backend:
    build: 
      context: ./coordinator/
      network: host
    image: backend-bench:latest
    hostname: coordinator
    container_name: bench-backend-fastapi
    restart: always
    volumes:
      - ./coordinator/:/app/
    ports:
      - "80:80"
    env_file:
      - ./.env
    networks:
      - backend_fastapi
      - backend_communicator
    depends_on:
      - db-local
      - ressearch_backend
      - finance_backend
      - rabbitmq
  
  support_backend:
    build:
      context: ./support/
      network: host
    hostname: support
    image: backend-bench-django:latest
    container_name: bench-backend-django
    ports:
      - "3003:3003"
    networks:
      - backend_communicator
    depends_on:
      - coordinator_backend
    volumes:
      - ./support/:/app/
  
  # Rails application
  ressearch_backend:
    build:
      context: ./ressearch/
    container_name: bench-backend-rails
    hostname: ressearch
    env_file:
      - .env
    volumes:
      - ./ressearch:/rails
    image:
      ressearch_backend:latest
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - db-local2
    networks:
      - backend_rails
      - backend_communicator
  
  # Go application
  finance_backend:
    build: 
      context: ./finance/
      network: host
    container_name: bench-backend-golang
    hostname: finance
    volumes:
      - ./finance:/app
    image: finance_backend:latest
    ports:
      - "3001:3001"
    networks:
      - backend_finance
      - backend_communicator
    
  frontend:
    build: 
      context: ./frontend
      network: host
    container_name: bench-frontend
    volumes:
      - ./frontend/app:/app
    ports:
      - "3002:3002"
    networks:
      - backend_communicator
    depends_on:
      - coordinator_backend 
  
  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning # --requirepass password
    volumes: 
      - redis-cache:/data
    networks:
      - backend_communicator
  
  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: 'bench-rabbitmq'
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/
    env_file:
      - ./.env_rabbitmq
    networks:
      - backend_communicator
    hostname: rabbitmq
    logging:
      driver: none
  
    
    
#    environment:
#      - API_ENVIRONMENT=local
#    healthcheck:
#      test: ["CMD", "curl", "-f", "localhost:8000/healthcheck"]
#      interval: 60s
#      timeout: 5s
#      retries: 5


volumes:
  pgdata_fastapi:
  pgdata_rails:
  redis-cache:
    driver: local
  rabbitmq_data:
  rabbitmq_log:
  

networks:
  backend_fastapi:
    driver: bridge
  backend_rails:
    driver: bridge
  backend_finance:
    driver: bridge
  backend_communicator: